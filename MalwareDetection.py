from tkinter import *
from tkinter import filedialog
import tkinter
from PIL import Image, ImageTk
import numpy as np
import os
import re
import joblib
root = Tk()
root.title("Malicious File Analyzer")
root.geometry("700x500+150+180")
root.resizable(False, False)
root.configure(bg="#2E2E2E")


def checkMalware():
    loaded = joblib.load('naive_bayes_model')
    inputarr = [hash, size_of_data, entropy]
    hash_numeric = sum(ord(char) for char in inputarr[0])
    size_of_data_numeric = float(inputarr[1])
    entropy_numeric = float(inputarr[2])
    inputarr = [hash_numeric, size_of_data_numeric, entropy_numeric]
    inputarr_2d = np.array(inputarr).reshape(1, -1)

    otpt = loaded.predict(inputarr_2d)

    if otpt == 1:
        result = 'File is MALICIOUS'
        text1.tag_configure('big', font=('Helvetica', 16, 'bold'))
        text1.insert(tkinter.END, result, 'big')
        text1.insert(tkinter.END, '\n')
    else:
        result = 'File is NOT MALICIUS (IT IS SAFE)'
        text1.tag_configure('big', font=('Helvetica', 16, 'bold'))
        text1.insert(tkinter.END, result, 'big')
        text1.insert(tkinter.END, '\n')
    

def showimage():
    global filename
    filename = filedialog.askopenfilename()
    img = Image.open('filelogo.png')  # Pass filename to Image.open()
    img = ImageTk.PhotoImage(img)
    lbl.configure(image=img, width=250, height=250)
    lbl.image = img
    global  hash
    hash = calculate_md5(filename)
    global entropy
    entropy = calculate_entropy(filename)
    global size_of_data
    size_of_data = calculate_file_size(filename)

def calculate_file_size(file_path):
    return os.path.getsize(file_path)


import hashlib

def calculate_md5(file_path):
    """Calculate MD5 hash of a file."""
    md5_hash = hashlib.md5()
    with open(file_path, "rb") as f:
        # Read and update hash string value in blocks of 4K
        for chunk in iter(lambda: f.read(4096), b""):
            md5_hash.update(chunk)
    return md5_hash.hexdigest()


import math

def calculate_entropy(file_path):
    # Initialize dictionary to store byte frequencies
    byte_freq = {}

    # Get total file size
    total_bytes = os.path.getsize(file_path)

    # Read file and calculate byte frequencies
    with open(file_path, 'rb') as f:
        byte = f.read(1)
        while byte:
            byte_value = byte[0]
            if byte_value not in byte_freq:
                byte_freq[byte_value] = 1
            else:
                byte_freq[byte_value] += 1
            byte = f.read(1)

    # Calculate entropy
    entropy = 0
    for freq in byte_freq.values():
        probability = freq / total_bytes
        entropy -= probability * math.log2(probability)

    return entropy

image_icon = PhotoImage(file="logo.jpg")
root.iconphoto(False, image_icon)
logo = PhotoImage(file="logo.png")
Label(root, image=logo, bg="#2E2E2E").place(x=10, y=0)
Label(root, text="Malicious File Analyzer", bg="#2E2E2E", fg="white", font="arial 25 bold").place(x=100, y=20)

f = Frame(root, bd=3, bg="black", width=340, height=280, relief=GROOVE)
f.place(x=10, y=80)
lbl = Label(f, bg="black")
lbl.place(x=40, y=10)

frame2 = Frame(root, bd=3, bg="white", width=340, height=280, relief=GROOVE)
frame2.place(x=350, y=80)
text1 = Text(frame2, font="Roboto 15", bg="grey", fg="black", relief=GROOVE, wrap=WORD)
text1.place(x=0, y=0, width=320, height=295)
scrollbar1 = Scrollbar(frame2)
scrollbar1.place(x=320, y=0, height=300)
scrollbar1.configure(command=text1.yview)
text1.configure(yscrollcommand=scrollbar1.set)

frame3 = Frame(root, bd=3, bg="#2E2E2E", width=330, height=100, relief=GROOVE)
frame3.place(x=10, y=370)
Button(frame3, text="Open File", width=18, height=2, font="arial 14 bold", command=showimage).place(x=50, y=30)  # Fix command
Label(frame3, text="", bg="#2E2E2E", fg="#5F9EA0").place(x=48, y=5)

frame4 = Frame(root, bd=3, bg="#2E2E2E", width=330, height=100, relief=GROOVE)
frame4.place(x=360, y=370)
Button(frame4, text="Check Malware", width=15, height=2, font="arial 14 bold", command=checkMalware).place(x=120, y=30)
Label(frame4, text="", bg="#2E2E2E", fg="#5F9EA0").place(x=20, y=5)


root.mainloop()
